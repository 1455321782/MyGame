// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MyPlane.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace MyPlane {

  #region Messages
  public sealed class AirPlane : pb::IMessage {
    private static readonly pb::MessageParser<AirPlane> _parser = new pb::MessageParser<AirPlane>(() => new AirPlane());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AirPlane> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "px" field.</summary>
    public const int PxFieldNumber = 2;
    private float px_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Px {
      get { return px_; }
      set {
        px_ = value;
      }
    }

    /// <summary>Field number for the "py" field.</summary>
    public const int PyFieldNumber = 3;
    private float py_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Py {
      get { return py_; }
      set {
        py_ = value;
      }
    }

    /// <summary>Field number for the "pz" field.</summary>
    public const int PzFieldNumber = 4;
    private float pz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Pz {
      get { return pz_; }
      set {
        pz_ = value;
      }
    }

    /// <summary>Field number for the "rx" field.</summary>
    public const int RxFieldNumber = 5;
    private float rx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rx {
      get { return rx_; }
      set {
        rx_ = value;
      }
    }

    /// <summary>Field number for the "ry" field.</summary>
    public const int RyFieldNumber = 6;
    private float ry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Ry {
      get { return ry_; }
      set {
        ry_ = value;
      }
    }

    /// <summary>Field number for the "rz" field.</summary>
    public const int RzFieldNumber = 7;
    private float rz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rz {
      get { return rz_; }
      set {
        rz_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Px != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Px);
      }
      if (Py != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Py);
      }
      if (Pz != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Pz);
      }
      if (Rx != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Rx);
      }
      if (Ry != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Ry);
      }
      if (Rz != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Rz);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Px != 0F) {
        size += 1 + 4;
      }
      if (Py != 0F) {
        size += 1 + 4;
      }
      if (Pz != 0F) {
        size += 1 + 4;
      }
      if (Rx != 0F) {
        size += 1 + 4;
      }
      if (Ry != 0F) {
        size += 1 + 4;
      }
      if (Rz != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 21: {
            Px = input.ReadFloat();
            break;
          }
          case 29: {
            Py = input.ReadFloat();
            break;
          }
          case 37: {
            Pz = input.ReadFloat();
            break;
          }
          case 45: {
            Rx = input.ReadFloat();
            break;
          }
          case 53: {
            Ry = input.ReadFloat();
            break;
          }
          case 61: {
            Rz = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed class AirPlaneList : pb::IMessage {
    private static readonly pb::MessageParser<AirPlaneList> _parser = new pb::MessageParser<AirPlaneList>(() => new AirPlaneList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AirPlaneList> Parser { get { return _parser; } }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MyPlane.AirPlane> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::MyPlane.AirPlane.Parser);
    private readonly pbc::RepeatedField<global::MyPlane.AirPlane> list_ = new pbc::RepeatedField<global::MyPlane.AirPlane>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MyPlane.AirPlane> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
